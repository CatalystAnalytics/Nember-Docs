{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Nember API Docs","text":"<p>For the web app visit nember.catalystanalytics.io.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>The docs are broken down into sections for each kind of prediction. For instance <code>Entry Predictions</code> will be in their own section. If the section does not end in <code>Predictions</code> then it is a general route.</p> <p>Required prior to using API:</p> <ul> <li>API Key from the web app.</li> <li>Programming language of choice.</li> </ul> <p>The API is used in correlation to the web app for users training models for their trading bots/algorithms. NOTE Any asterisk (<code>*</code>) means it is required.</p>"},{"location":"entry/","title":"Entry Predictions","text":""},{"location":"entry/#entryenter-data-post","title":"/entry/enter-data - POST","text":"<p><code>https://api.nember.catalystanalytics.io/entry/enter-data</code></p> <p>To enter data into the machine learning process for your models, you can access the route via the <code>/entry/enter-data</code>. The data must be in a structured format which can be found below. The API key must also be included in the header. Entering data does not incur any usage charges. Once the data is pushed, any previous data will be overwritten. We do not store multiple different sessions of data. There is a 6-hour timer on the data, meaning after 6 hours, the data will be cleared.</p>"},{"location":"entry/#request","title":"Request","text":""},{"location":"entry/#headers","title":"Headers","text":"Key Value Description <code>api_key</code> <code>&lt;your-api-key&gt;</code> Required. Your API authentication key."},{"location":"entry/#body","title":"Body","text":"<p>data* (string): Name of key for format.</p> <p>StratName* (string): The name of the strategy.</p> <p>Open* (boolean): Indicates if the trade is currently open.</p> <p>EnterValue* (number): The entry value for the trade.</p> <p>ExitValue* (number): The exit value for the trade.</p> <p>EntryTime* (number): The timestamp of the entry in Unix format.</p> <p>ExitTime* (number): The timestamp of the exit in Unix format.</p> <p>Target* (number, required): The target value for the strategy.</p> <p>StopLoss (number): The stop-loss value for the strategy.</p> <p>Outcome* (number): The outcome of the strategy.</p> <p>Position* (string): The position type (<code>long</code> or <code>short</code>).</p> <p>DataPoints* (array of objects): Contains key-value pairs data points which is vital and used in training the X values. Each object in this array must include:</p> <p>Key* (string): The name of the data point, can be indicator name or something else.</p> <p>Value* (number): The value associated with the data point, like sma value.</p>"},{"location":"entry/#request-example","title":"Request Example","text":"<pre><code>{\n    \"data\": [\n        {\n            \"StratName\": \"example_strategy\",\n            \"Open\": true,\n            \"EnterValue\": 1.25,\n            \"ExitValue\": 1.35,\n            \"EnterTime\": 1629187200,\n            \"ExitTime\": 1629190800,\n            \"Target\": 1.40,\n            \"StopLoss\": 1.20,\n            \"Outcome\": 1,\n            \"Position\": \"Long\",\n            \"DataPoints\": [\n                {\"point1\": 1.0, \"point2\": 2.5}, \n                {\"point1\": 2.0, \"point2\": 3.0}\n            ]\n        },\n        {\n            \"StratName\": \"example_strategy\",\n            \"Open\": true,\n            \"EnterValue\": 1.25,\n            \"ExitValue\": 1.35,\n            \"EnterTime\": 1629187200,\n            \"ExitTime\": 1629190800,\n            \"Target\": 1.40,\n            \"StopLoss\": 1.20,\n            \"Outcome\": 1,\n            \"Position\": \"Long\",\n            \"DataPoints\": [\n                {\"point1\": 1.0, \"point2\": 2.5}, \n                {\"point1\": 2.0, \"point2\": 3.0}\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"entry/#response-object","title":"Response Object","text":"<pre><code>{ \"message\":  \"Data received successfully\"}\n</code></pre>"},{"location":"entry/#code-sample","title":"Code Sample","text":"PythonC#cURL <pre><code>import requests\n\nurl = \"https://api.nember.catalystanalytics.io/entry/enter-data\"\nheaders = {\"api_key\": \"your_api_key\"}\ndata = {\n    \"data\": [\n        {\n            \"StratName\": \"example_strategy\",\n            \"Open\": true,\n            \"EnterValue\": 1.25,\n            \"ExitValue\": 1.35,\n            \"EnterTime\": 1629187200,\n            \"ExitTime\": 1629190800,\n            \"Target\": 1.40,\n            \"StopLoss\": 1.20,\n            \"Outcome\": 1,\n            \"Position\": \"Long\",\n            \"DataPoints\": [\n                {\"point1\": 1.0, \"point2\": 2.5}, \n                {\"point1\": 2.0, \"point2\": 3.0}\n            ]\n        },\n        {\n            \"StratName\": \"example_strategy\",\n            \"Open\": true,\n            \"EnterValue\": 1.25,\n            \"ExitValue\": 1.35,\n            \"EnterTime\": 1629187200,\n            \"ExitTime\": 1629190800,\n            \"Target\": 1.40,\n            \"StopLoss\": 1.20,\n            \"Outcome\": 1,\n            \"Position\": \"Long\",\n            \"DataPoints\": [\n                {\"point1\": 1.0, \"point2\": 2.5}, \n                {\"point1\": 2.0, \"point2\": 3.0}\n            ]\n        }\n    ]\n}\n\nresponse = requests.post(url, json=data, headers=headers)\nprint(response.json())\n</code></pre> <pre><code>using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\n\nclass Program {\n    static async Task Main(string[] args) {\n        string url = \"https://api.nember.catalystanalytics.io/entry/enter-data\";\n        string apiKey = \"your_api_key\";\n        string jsonPayload = @\"{\n            \\\"data\\\": [\n                {\n                    \\\"StratName\\\": \\\"example_strategy\\\",\n                    \\\"Open\\\": true,\n                    \\\"EnterValue\\\": 1.25,\n                    \\\"ExitValue\\\": 1.35,\n                    \\\"EnterTime\\\": 1629187200,\n                    \\\"ExitTime\\\": 1629190800,\n                    \\\"Target\\\": 1.40,\n                    \\\"StopLoss\\\": 1.20,\n                    \\\"Outcome\\\": 1,\n                    \\\"Position\\\": \\\"Long\\\",\n                    \\\"DataPoints\\\": [\n                        { \\\"point1\\\": 1.0, \\\"point2\\\": 2.5 },\n                        { \\\"point1\\\": 2.0, \\\"point2\\\": 3.0 }\n                    ]\n                }\n            ]\n        }\";\n\n        using HttpClient client = new HttpClient();\n        var request = new HttpRequestMessage(HttpMethod.Post, url);\n        request.Headers.Add(\"api_key\", apiKey);\n        request.Content = new StringContent(jsonPayload, Encoding.UTF8, \"application/json\");\n\n        HttpResponseMessage response = await client.SendAsync(request);\n        Console.WriteLine(await response.Content.ReadAsStringAsync());\n    }\n}\n</code></pre> <pre><code>curl -X POST \"https://yourapi.com/api/entry/enter-data\" \\\n-H \"Content-Type: application/json\" \\\n-H \"api_key: your_api_key\" \\\n-d '{\n\"data\": [\n    {\n    \"StratName\": \"example_strategy\",\n    \"Open\": true,\n    \"EnterValue\": 1.25,\n    \"ExitValue\": 1.35,\n    \"EnterTime\": 1629187200,\n    \"ExitTime\": 1629190800,\n    \"Target\": 1.40,\n    \"StopLoss\": 1.20,\n    \"Outcome\": 1,\n    \"Position\": \"Long\",\n    \"DataPoints\": [\n        {\"point1\": 1.0, \"point2\": 2.5}, \n        {\"point1\": 2.0, \"point2\": 3.0}\n    ]\n    }\n]\n}' \n</code></pre>"},{"location":"websocket/","title":"Websocket","text":"<p>The Nember websocket connection can be used to provide insanely fast predictions up to 20ms response time. We recommend using this endpoint if the trading bot/algo needs to make fast predictions in a small interval (ticks, seconds, and lower 1 - 10 minute intervals). Below is a detailed guide on how to use this endpoint properly. With one API Key, any number of connections can be made but the usage charge will occur for each connection made. You can access you connections in the web app. If for any reason something happens you can close the connection on the web app.</p>"},{"location":"websocket/#ws-websocket","title":"/ws - Websocket","text":"<p><code>wss://api.nember.catalystanalytics.io/ws</code></p>"},{"location":"websocket/#step-1-connect","title":"Step 1: Connect","text":"wscatPython <pre><code>wscat -c wss://api.nember.catalystanalytics.io/ws\n</code></pre> <pre><code>import asyncio\nimport websockets\n\nasync def connect():\n    uri = \"wss://api.nember.catalystanalytics.io/ws\"\n    async with websockets.connect(uri) as websocket:\n        pass\n\n# Run the event loop\nasyncio.get_event_loop().run_until_complete(connect())\n</code></pre>"},{"location":"websocket/#step-2-authenticate","title":"Step 2: Authenticate","text":"<p>Every connection needs to be authenticated with a API Key which can be found in your dashboard. To authenticate a connection you just need to send the api key as your first text to the server by itself. If the key is valid the connection will be sustained if invalid the connection will be terminated. </p>"},{"location":"websocket/#response-object","title":"Response Object","text":"ValidInvalid <pre><code>{ \n    \"status\": \"success\",\n    \"message\": \"Valid API key.\" \n}\n</code></pre> <pre><code>{ \n    \"status\": \"error\",\n    \"message\": \"Invalid API key.\" \n}\n</code></pre>"},{"location":"websocket/#code-sample","title":"Code Sample","text":"Python <pre><code>import asyncio\nimport websockets\n\nasync def connect():\n    uri = \"wss://api.nember.catalystanalytics.io/ws\"\n    async with websockets.connect(uri) as websocket:\n        await websocket.send(\"your_api_key\")\n\n        response = await websocket.recv()\n        response_data = json.loads(response)\n\n        if \"message\" in response_data and response_data[\"message\"] == \"valid\":\n            print(\"API key successfully verified!\")\n        else:\n            print(\"API key verification failed.\")\n\n# Run the event loop\nasyncio.get_event_loop().run_until_complete(connect())\n</code></pre>"},{"location":"websocket/#step-3-make-predictions","title":"Step 3: Make Predictions","text":"<p>After your key is authenticated you can make predictions with your models you trained in the web app dashbaord. This is pretty straight foward, just need to specify the model you want with the same amount of data points used during training.</p>"},{"location":"websocket/#request-example","title":"Request Example","text":"<pre><code>{\n    \"api_key\": \"your_api_key\",\n    \"strat_name\": \"example_strategy\",\n    \"model_name\": \"DecisionTree\",\n    \"model_type\": \"class\",\n    \"DataPoints\": [\n        { \"point1\": 3, \"point2\": 2 },\n        { \"point1\": 1, \"point2\": 3 }\n    ]\n}\n</code></pre>"},{"location":"websocket/#response-object_1","title":"Response Object","text":"Excisting Model PredictionNew Model PredictionNo Model Found <pre><code>{\n    \"type\": \"success\",\n    \"seq_num\": 1,\n    \"message\": \"Existing model data used for prediction\",\n    \"prediction\": \"&lt;YOUR PREDICTION VALUE&gt;\"\n}\n</code></pre> <pre><code>{\n    \"type\": \"success\",\n    \"seq_num\": 1,\n    \"message\": \"New model configuration added, prediction made\",\n    \"prediction\": \"&lt;YOUR PREDICTION VALUE&gt;\"\n}\n</code></pre> <pre><code>{\n    \"type\": \"error\",\n    \"seq_num\": 1,\n    \"message\": \"Model configuration not found in the backend.\"\n}\n</code></pre>"},{"location":"websocket/#code-sample_1","title":"Code Sample","text":"Python <pre><code>import asyncio\nimport websockets\n\nasync def connect():\n    uri = \"wss://api.nember.catalystanalytics.io/ws\"\n    connected = False\n    async with websockets.connect(uri) as websocket:\n        if not connected:\n            await websocket.send(\"your_api_key\")\n        elif:\n            data = {\n                \"api_key\": \"your_api_key\",\n                \"strat_name\": \"example_strategy\",\n                \"model_name\": \"DecisionTree\",\n                \"model_type\": \"class\",\n                \"DataPoints\": [\n                    { \"point1\": 3, \"point2\": 2 },\n                    { \"point1\": 1, \"point2\": 3 }\n                ]\n            }\n            await websocket.send(json.dumps(data))\n\n        response = await websocket.recv()\n        response_data = json.loads(response)\n\n        if \"message\" in response_data and response_data[\"message\"] == \"valid\" and not connected:\n            connected = True\n        elif connected:\n            if response_data[\"type\"] == \"success\":\n                print(response_data[\"prediction\"])\n            elif response_data[\"type\"] == \"error\":\n                print(response_data[\"message\"])\n        else: \n            print(\"API key verification failed.\")\n\n# Run the event loop\nasyncio.get_event_loop().run_until_complete(connect())\n</code></pre>"}]}